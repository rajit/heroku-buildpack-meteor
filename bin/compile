#!/bin/sh

set -e            # fail fast
# set -o pipefail   # don't ignore exit codes when piping output
set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Fix leak
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Resolve node version using semver.io
node_version=$(curl --silent --get https://semver.io/node/resolve)

status "Using latest stable node: $node_version"

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/.vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/.vendor/node
chmod +x $build_dir/.vendor/node/bin/*
PATH=$build_dir/.vendor/node/bin:$PATH

if test -d $cache_dir/meteor; then
  cp -r $cache_dir/meteor $HOME/.meteor
else
  status "Installing meteor Package"
  curl -s https://install.meteor.com/ | sh 2>&1 | indent
fi

cd $build_dir
status "Building meteor bundle"
$HOME/.meteor/meteor build --directory deploy 2>&1 | indent
cd deploy/bundle/programs/server

# Scope config var availability only to `npm install`
(
  if [ -d "$env_dir" ]; then
    status "Exporting config vars to environment"
    export_env_dir $env_dir
  fi

  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $build_dir/.npmrc --production 2>&1 | indent
)

status "Checking for post_compile script"
if [ -f $build_dir/bin/post_compile ] ; then
    status "Running post_compile hook"
    chmod +x $build_dir/bin/post_compile
    $build_dir/bin/post_compile
fi
